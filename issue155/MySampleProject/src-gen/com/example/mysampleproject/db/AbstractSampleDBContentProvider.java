/*
 * Generated by Robotoworks Mechanoid
 */
package com.example.mysampleproject.db;

import android.content.Context;
import android.content.UriMatcher;
import com.robotoworks.mechanoid.db.MechanoidContentProvider;
import com.robotoworks.mechanoid.db.MechanoidSQLiteOpenHelper;
import com.robotoworks.mechanoid.db.DefaultContentProviderActions;
import com.robotoworks.mechanoid.db.ContentProviderActions;
import com.example.mysampleproject.db.AbstractSampleDBOpenHelper.Sources;
import com.example.mysampleproject.db.ArtistsRecord;

public abstract class AbstractSampleDBContentProvider extends MechanoidContentProvider {

	private static final int ARTISTS = 0;
	private static final int ARTISTS_ID = 1;

	private static final int ARTISTS_VIEW = 2;
	private static final int ARTISTS_VIEW_ID = 3;
	
	public static final int NUM_URI_MATCHERS = 4;

	@Override
    protected UriMatcher createUriMatcher() {
        final UriMatcher matcher = new UriMatcher(UriMatcher.NO_MATCH);
        final String authority = SampleDBContract.CONTENT_AUTHORITY;

		// Sources
		matcher.addURI(authority, "artists", ARTISTS);
		matcher.addURI(authority, "artists/#", ARTISTS_ID);

		// Views
		matcher.addURI(authority, "artists_view", ARTISTS_VIEW);
		matcher.addURI(authority, "artists_view/#", ARTISTS_VIEW_ID);

		// User Actions
        return matcher;
    }
    
    @Override
    protected String[] createContentTypes() {
		String[] contentTypes = new String[NUM_URI_MATCHERS];

		contentTypes[ARTISTS] = SampleDBContract.Artists.CONTENT_TYPE;
		contentTypes[ARTISTS_ID] = SampleDBContract.Artists.ITEM_CONTENT_TYPE;
		contentTypes[ARTISTS_VIEW] = SampleDBContract.ArtistsView.CONTENT_TYPE;
		contentTypes[ARTISTS_VIEW_ID] = SampleDBContract.ArtistsView.ITEM_CONTENT_TYPE;
		
		return contentTypes;
    }

	@Override
	protected MechanoidSQLiteOpenHelper createOpenHelper(Context context) {
        return new SampleDBOpenHelper(context);
	}
    
    @Override
    protected ContentProviderActions createActions(int id) {
    	switch(id) {
			case ARTISTS: 
				return createArtistsActions();
			case ARTISTS_ID:
				return createArtistsByIdActions();
			case ARTISTS_VIEW:
				return createArtistsViewActions();
			case ARTISTS_VIEW_ID: 
				return createArtistsViewByIdActions();
			default:
				throw new UnsupportedOperationException("Unknown id: " + id);
    	}
    }
    
    protected ContentProviderActions createArtistsByIdActions() {
    	return new DefaultContentProviderActions(Sources.ARTISTS, true, ArtistsRecord.getFactory());
    }
    
    protected ContentProviderActions createArtistsActions() {
    	return new DefaultContentProviderActions(Sources.ARTISTS, false, ArtistsRecord.getFactory());
    }
    
    protected ContentProviderActions createArtistsViewByIdActions() {
    	return new DefaultContentProviderActions(Sources.ARTISTS_VIEW, true, ArtistsViewRecord.getFactory());
    }
    
    protected ContentProviderActions createArtistsViewActions() {
    	return new DefaultContentProviderActions(Sources.ARTISTS_VIEW, false, ArtistsViewRecord.getFactory());
    }
    
}
